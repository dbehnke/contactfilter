name: Build and Release

on:
  push:
    branches: [ "main" ]
    tags:
      - 'v*'
  workflow_dispatch: # Allows manual triggering from the Actions tab

jobs:
  build:
    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            asset_name: contactfilter-linux-x86_64
          - os: macos-latest
            target: x86_64-apple-darwin
            asset_name: contactfilter-macos-x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            asset_name: contactfilter-windows-x86_64.exe
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ matrix.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Run tests
        run: cargo test --verbose

      - name: Build the binary
        run: cargo build --verbose --release --target ${{ matrix.target }}

      - name: Prepare binary for upload
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            cp target/${{ matrix.target }}/release/contactfilter.exe ${{ matrix.asset_name }}
          else
            cp target/${{ matrix.target }}/release/contactfilter ${{ matrix.asset_name }}
          fi

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: ${{ matrix.asset_name }}

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write # Needed to create releases and upload assets

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all built binaries
        uses: actions/download-artifact@v4
        with:
          path: release-assets
          merge-multiple: true

      - name: Prepare release assets
        shell: bash
        run: |
          # Make the linux binary executable so we can run it in the next step.
          chmod +x release-assets/contactfilter-linux-x86_64

      - name: Generate release info
        id: generate_info
        shell: bash
        run: |
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            echo "TAG=${{ github.ref_name }}" >> $GITHUB_OUTPUT
            echo "NAME=Release ${{ github.ref_name }}" >> $GITHUB_OUTPUT
            echo "PRERELEASE=false" >> $GITHUB_OUTPUT
          else
            echo "TAG=nightly" >> $GITHUB_OUTPUT
            echo "NAME=Nightly Build" >> $GITHUB_OUTPUT
            echo "PRERELEASE=true" >> $GITHUB_OUTPUT
          fi
          echo "FILENAME=filtered-contacts.csv" >> $GITHUB_ENV

      - name: Run the contact filter
        run: |
          ./release-assets/contactfilter-linux-x86_64 input_baofeng_dm32uv.csv countries.txt "${{ env.FILENAME }}"

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "release-assets/*,${{ env.FILENAME }}"
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ steps.generate_info.outputs.TAG }}
          name: ${{ steps.generate_info.outputs.NAME }}
          prerelease: ${{ steps.generate_info.outputs.PRERELEASE }}
          allowUpdates: true # Allows overwriting the 'nightly' release
