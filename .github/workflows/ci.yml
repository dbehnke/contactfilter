name: Build and Release

on:
  push:
    branches: [ "main" ]
    tags:
      - 'v*'
  workflow_dispatch: # Allows manual triggering from the Actions tab

jobs:
  build:
    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            asset_name: contactfilter-linux-x86_64
          - os: macos-latest
            target: x86_64-apple-darwin
            asset_name: contactfilter-macos-x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            asset_name: contactfilter-windows-x86_64.exe
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ matrix.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Build the binary
        run: cargo build --verbose --release --target ${{ matrix.target }}

      - name: Prepare binary for upload
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            cp target/${{ matrix.target }}/release/contactfilter.exe ${{ matrix.asset_name }}
          else
            cp target/${{ matrix.target }}/release/contactfilter ${{ matrix.asset_name }}
          fi

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: ${{ matrix.asset_name }}

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build # This job depends on the build job completing successfully

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        # We still need rust to run the script and generate the CSV
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable

      - name: Build the project (for CSV generation)
        run: cargo build --verbose --release

      - name: Generate version and filename
        id: generate_vars
        run: |
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
          else
            VERSION="$(date +'%Y%m%d')-$(echo $GITHUB_SHA | cut -c1-7)"
          fi
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "FILENAME=filtered-contacts-${VERSION}.csv" >> $GITHUB_ENV

      - name: Run the contact filter
        run: |
          ./target/release/contactfilter input_baofeng_dm32uv.csv countries.txt "${{ env.FILENAME }}"

      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: ncipollo/release-action@v1
        with:
          artifacts: "${{ env.FILENAME }}"
          token: ${{ secrets.GITHUB_TOKEN }}
          prerelease: false

      - name: Create Pre-release
        if: github.ref == 'refs/heads/main'
        uses: ncipollo/release-action@v1
        with:
          artifacts: "${{ env.FILENAME }}"
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: nightly
          name: Nightly Build ${{ env.VERSION }}
          prerelease: true
          allowUpdates: true
